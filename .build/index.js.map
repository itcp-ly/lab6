{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["import Koa from \"koa\";\nimport Router, { RouterContext } from \"koa-router\";\nimport bodyParser from \"koa-bodyparser\";\nimport logger from \"koa-logger\";\nimport json from \"koa-json\";\nconst app: Koa = new Koa();\nconst router = new Router({ prefix: '/api/v1/articles' });\n\nconst welcomeAPI = async (ctx: RouterContext, next: any) => {\n  ctx.body = {\n    message: \"Welcome to the blog API!\"\n  };\n  await next();\n}\n\nconst articles = [\n  { title: 'hello article', fullText: 'some text here to fill the body' },\n  { title: 'another article', fullText: 'again here is some text here to fill' },\n  { title: 'coventry university ', fullText: 'some news about coventry university' },\n  { title: 'smart campus', fullText: 'smart campus is coming to IVE' }\n];\n\nconst getAll = async (ctx: RouterContext, next: any) => {\n  // Use the response body to send the articles as JSON.\n  ctx.body = articles;\n  await next();\n}\n\nconst getById = async (ctx: RouterContext, next: any) => {\n  // Get the ID from the route parameters.\n  let id = ctx.params.id\n  // If it exists then return the article as JSON.\n  // Otherwise return a 404 Not Found status code\n  if ((id < articles.length + 1) && (id > 0)) {\n    ctx.body = articles[id - 1];\n  } else {\n    ctx.status = 404;\n  }\n  await next();\n}\n\nconst createArticle = async (ctx: RouterContext, next: any) => {\n  // The body parser gives us access to the request body on ctx.request.body.\n  // Use this to extract the title and fullText we were sent.\n  let { title, fullText } = ctx.request.body;\n  // In turn, define a new article for addition to the array.\n  let newArticle = { title: title, fullText: fullText };\n  articles.push(newArticle);\n  // Finally send back appropriate JSON and status code.\n  // Once we move to a DB store, the newArticle sent back will now have its ID.\n  ctx.status = 201;\n  ctx.body = newArticle;\n  await next();\n}\n\nasync function updateArticle(ctx: RouterContext, next: any) {\n  try {\n    const id = parseInt(ctx.params.id);\n    const articleIndex = id - 1;\n\n    if (articleIndex >= 0 && articleIndex < articles.length) {\n      let { title = '', fullText = '' } = ctx.request.body;\n      articles[articleIndex].title = title;\n      articles[articleIndex].fullText = fullText;\n      ctx.status = 200;\n      ctx.body = articles[articleIndex];\n    } else {\n      ctx.status = 404;\n      ctx.body = { error: 'Article not found' };\n    }\n  } catch (err) {\n    ctx.status = 500;\n    ctx.body = { error: 'Internal server error'+ err + ctx.request.body};\n    \n  }\n\n  await next();\n}\n\nasync function deleteArticle(ctx: RouterContext, next: any) {\n  try {\n    const id = parseInt(ctx.params.id);\n    const articleIndex = id - 1;\n\n    if (articleIndex >= 0 && articleIndex < articles.length) {\n      articles.splice(articleIndex, 1);\n      ctx.status = 204;\n    } else {\n      ctx.status = 404;\n      ctx.body = { error: 'Article not found' };\n    }\n  } catch (err) {\n    ctx.status = 500;\n    ctx.body = { error: 'Internal server error' };\n  }\n\n  await next();\n}\n\napp.use(bodyParser())\napp.use(logger());\napp.use(json());\napp.use(router.routes());\n\nrouter.get('/', getAll);\nrouter.post('/', bodyParser(), createArticle);\nrouter.get('/:id([0-9]{1,})', getById);\nrouter.put('/:id([0-9]{1,})', updateArticle);\nrouter.del('/:id([0-9]{1,})', deleteArticle);\n\napp.listen(10888);"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA,iBAAgB;AAChB,wBAAsC;AACtC,4BAAuB;AACvB,wBAAmB;AACnB,sBAAiB;AACjB,MAAM,MAAW,IAAI,WAAAA,QAAI;AACzB,MAAM,SAAS,IAAI,kBAAAC,QAAO,EAAE,QAAQ,mBAAmB,CAAC;AAExD,MAAM,aAAa,OAAO,KAAoB,SAAc;AAC1D,MAAI,OAAO;AAAA,IACT,SAAS;AAAA,EACX;AACA,QAAM,KAAK;AACb;AAEA,MAAM,WAAW;AAAA,EACf,EAAE,OAAO,iBAAiB,UAAU,kCAAkC;AAAA,EACtE,EAAE,OAAO,mBAAmB,UAAU,uCAAuC;AAAA,EAC7E,EAAE,OAAO,wBAAwB,UAAU,sCAAsC;AAAA,EACjF,EAAE,OAAO,gBAAgB,UAAU,gCAAgC;AACrE;AAEA,MAAM,SAAS,OAAO,KAAoB,SAAc;AAEtD,MAAI,OAAO;AACX,QAAM,KAAK;AACb;AAEA,MAAM,UAAU,OAAO,KAAoB,SAAc;AAEvD,MAAI,KAAK,IAAI,OAAO;AAGpB,MAAK,KAAK,SAAS,SAAS,KAAO,KAAK,GAAI;AAC1C,QAAI,OAAO,SAAS,KAAK;AAAA,EAC3B,OAAO;AACL,QAAI,SAAS;AAAA,EACf;AACA,QAAM,KAAK;AACb;AAEA,MAAM,gBAAgB,OAAO,KAAoB,SAAc;AAG7D,MAAI,EAAE,OAAO,SAAS,IAAI,IAAI,QAAQ;AAEtC,MAAI,aAAa,EAAE,OAAc,SAAmB;AACpD,WAAS,KAAK,UAAU;AAGxB,MAAI,SAAS;AACb,MAAI,OAAO;AACX,QAAM,KAAK;AACb;AAEA,eAAe,cAAc,KAAoB,MAAW;AAC1D,MAAI;AACF,UAAM,KAAK,SAAS,IAAI,OAAO,EAAE;AACjC,UAAM,eAAe,KAAK;AAE1B,QAAI,gBAAgB,KAAK,eAAe,SAAS,QAAQ;AACvD,UAAI,EAAE,QAAQ,IAAI,WAAW,GAAG,IAAI,IAAI,QAAQ;AAChD,eAAS,cAAc,QAAQ;AAC/B,eAAS,cAAc,WAAW;AAClC,UAAI,SAAS;AACb,UAAI,OAAO,SAAS;AAAA,IACtB,OAAO;AACL,UAAI,SAAS;AACb,UAAI,OAAO,EAAE,OAAO,oBAAoB;AAAA,IAC1C;AAAA,EACF,SAAS,KAAP;AACA,QAAI,SAAS;AACb,QAAI,OAAO,EAAE,OAAO,0BAAyB,MAAM,IAAI,QAAQ,KAAI;AAAA,EAErE;AAEA,QAAM,KAAK;AACb;AAEA,eAAe,cAAc,KAAoB,MAAW;AAC1D,MAAI;AACF,UAAM,KAAK,SAAS,IAAI,OAAO,EAAE;AACjC,UAAM,eAAe,KAAK;AAE1B,QAAI,gBAAgB,KAAK,eAAe,SAAS,QAAQ;AACvD,eAAS,OAAO,cAAc,CAAC;AAC/B,UAAI,SAAS;AAAA,IACf,OAAO;AACL,UAAI,SAAS;AACb,UAAI,OAAO,EAAE,OAAO,oBAAoB;AAAA,IAC1C;AAAA,EACF,SAAS,KAAP;AACA,QAAI,SAAS;AACb,QAAI,OAAO,EAAE,OAAO,wBAAwB;AAAA,EAC9C;AAEA,QAAM,KAAK;AACb;AAEA,IAAI,QAAI,sBAAAC,SAAW,CAAC;AACpB,IAAI,QAAI,kBAAAC,SAAO,CAAC;AAChB,IAAI,QAAI,gBAAAC,SAAK,CAAC;AACd,IAAI,IAAI,OAAO,OAAO,CAAC;AAEvB,OAAO,IAAI,KAAK,MAAM;AACtB,OAAO,KAAK,SAAK,sBAAAF,SAAW,GAAG,aAAa;AAC5C,OAAO,IAAI,mBAAmB,OAAO;AACrC,OAAO,IAAI,mBAAmB,aAAa;AAC3C,OAAO,IAAI,mBAAmB,aAAa;AAE3C,IAAI,OAAO,KAAK;",
  "names": ["Koa", "Router", "bodyParser", "logger", "json"]
}
