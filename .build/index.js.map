{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["import Koa from \"koa\";\nimport Router, {RouterContext} from \"koa-router\";\nimport bodyParser from \"koa-bodyparser\";\nimport logger from \"koa-logger\";\nimport json from \"koa-json\";\nconst app: Koa = new Koa();\nconst router = new Router({prefix: '/api/v1/articles'});\nconst welcomeAPI = async (ctx: RouterContext, next: any) => {\n ctx.body = {\n message: \"Welcome to the blog API!\"\n };\n await next();\n}\n\nconst articles = [\n {title:'hello article', fullText:'some text here to fill the body'},\n {title:'another article', fullText:'again here is some text here to fill'},\n {title:'coventry university ', fullText:'some news about coventry university'},\n {title:'smart campus', fullText:'smart campus is coming to IVE'}\n];\n\nconst getAll = async (ctx: RouterContext, next: any) => {\n // Use the response body to send the articles as JSON.\n ctx.body = articles;\n await next();\n} \n\nconst getById = async (ctx: RouterContext, next: any) => {\n // Get the ID from the route parameters.\n let id = ctx.params.id\n // If it exists then return the article as JSON.\n // Otherwise return a 404 Not Found status code\n if ((id < articles.length+1) && (id > 0)) {\n ctx.body = articles[id-1];\n } else {\n ctx.status = 404;\n }\n await next();\n}\n\nconst createArticle = async (ctx: RouterContext, next: any) => {\n // The body parser gives us access to the request body on ctx.request.body.\n // Use this to extract the title and fullText we were sent.\n let {title, fullText} = ctx.request.body;\n // In turn, define a new article for addition to the array.\n let newArticle = {title:title, fullText:fullText};\n articles.push(newArticle);\n // Finally send back appropriate JSON and status code.\n // Once we move to a DB store, the newArticle sent back will now have its ID.\n ctx.status = 201;\n ctx.body = newArticle;\n await next();\n}\n\nconst updateArticle = async (ctx: RouterContext, next: any) => {\n //TODO: edit an article\n}\nconst deleteArticle = async (ctx: RouterContext, next: any) => {\n //TODO: delete an article\n} \n\nrouter.get('/', getAll);\nrouter.post('/', bodyParser(), createArticle);\nrouter.get('/:id([0-9]{1,})', getById);\nrouter.put('/:id([0-9]{1,})', updateArticle);\nrouter.del('/:id([0-9]{1,})', deleteArticle);\napp.use(logger());\napp.use(json());\napp.use(router.routes());\napp.listen(10888);"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA,iBAAgB;AAChB,wBAAoC;AACpC,4BAAuB;AACvB,wBAAmB;AACnB,sBAAiB;AACjB,MAAM,MAAW,IAAI,WAAAA,QAAI;AACzB,MAAM,SAAS,IAAI,kBAAAC,QAAO,EAAC,QAAQ,mBAAkB,CAAC;AACtD,MAAM,aAAa,OAAO,KAAoB,SAAc;AAC3D,MAAI,OAAO;AAAA,IACX,SAAS;AAAA,EACT;AACA,QAAM,KAAK;AACZ;AAEA,MAAM,WAAW;AAAA,EAChB,EAAC,OAAM,iBAAiB,UAAS,kCAAiC;AAAA,EAClE,EAAC,OAAM,mBAAmB,UAAS,uCAAsC;AAAA,EACzE,EAAC,OAAM,wBAAwB,UAAS,sCAAqC;AAAA,EAC7E,EAAC,OAAM,gBAAgB,UAAS,gCAA+B;AAChE;AAEA,MAAM,SAAS,OAAO,KAAoB,SAAc;AAEvD,MAAI,OAAO;AACX,QAAM,KAAK;AACZ;AAEA,MAAM,UAAU,OAAO,KAAoB,SAAc;AAExD,MAAI,KAAK,IAAI,OAAO;AAGpB,MAAK,KAAK,SAAS,SAAO,KAAO,KAAK,GAAI;AAC1C,QAAI,OAAO,SAAS,KAAG;AAAA,EACvB,OAAO;AACP,QAAI,SAAS;AAAA,EACb;AACA,QAAM,KAAK;AACZ;AAEA,MAAM,gBAAgB,OAAO,KAAoB,SAAc;AAG9D,MAAI,EAAC,OAAO,SAAQ,IAAI,IAAI,QAAQ;AAEpC,MAAI,aAAa,EAAC,OAAa,SAAiB;AAChD,WAAS,KAAK,UAAU;AAGxB,MAAI,SAAS;AACb,MAAI,OAAO;AACX,QAAM,KAAK;AACZ;AAEA,MAAM,gBAAgB,OAAO,KAAoB,SAAc;AAE/D;AACA,MAAM,gBAAgB,OAAO,KAAoB,SAAc;AAE/D;AAEA,OAAO,IAAI,KAAK,MAAM;AACtB,OAAO,KAAK,SAAK,sBAAAC,SAAW,GAAG,aAAa;AAC5C,OAAO,IAAI,mBAAmB,OAAO;AACrC,OAAO,IAAI,mBAAmB,aAAa;AAC3C,OAAO,IAAI,mBAAmB,aAAa;AAC3C,IAAI,QAAI,kBAAAC,SAAO,CAAC;AAChB,IAAI,QAAI,gBAAAC,SAAK,CAAC;AACd,IAAI,IAAI,OAAO,OAAO,CAAC;AACvB,IAAI,OAAO,KAAK;",
  "names": ["Koa", "Router", "bodyParser", "logger", "json"]
}
